package cm3113.lab07.Ex1;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Main class. Starts Producers and Consumers that share queue.
 * Consumers save data read from queue into data
 */
public class Main extends javax.swing.JFrame {
    CopyOnWriteArrayList<Integer> data;
    Monitor queueMonitor;
    Producer[] producers;
    Consumer[] consumers;
    ExecutorService executor;
    int NP = 1, NC = 1, dataPerP = 100;
    int maxQ = 0;
    
    public Main() {
        initComponents();
        data = new CopyOnWriteArrayList<>();
    }
    
    public void updateData() {
        int n = Consumer.getCount();
        int tot = Consumer.getTotal();
        textDataReceived.setText(n + "");
        textDataTotal.setText(tot + "");
        textDataAverage.setText(1.0 * tot / n + "");
        int q = queueMonitor.getQueueLength();
        if (q > maxQ) maxQ = q;
        textQueueSummary.setText("Q length =" + queueMonitor.getQueueLength() + ", "
                + " Data length =" + data.size()
                + ", " + " Max Q length was=" + maxQ);
    }
    
    public void addToData(Integer newdata){
        data.add(newdata);
    }
    
    public void addToHistory(String str){
        textDataHistory.append(str);
    }
    
    public void startProdCons(){
        Consumer.reset();
        Producer.reset();
        NP = (Integer)this.spinnerNumProd.getValue();
        NC = (Integer)this.spinnerNumberCons.getValue();
        executor = Executors.newFixedThreadPool(NP + NC);
        dataPerP = (Integer)this.spinnerNumItems.getValue();
        textDataExpected.setText((NP * dataPerP) +"");
        queueMonitor = new Monitor(16);
        data.clear();
        producers = new Producer[NP];
        consumers = new Consumer[NC];
        queueMonitor = new Monitor(16);
        
        for(int i = 0; i < NP ; i++){
            producers[i] = new Producer(queueMonitor,dataPerP);
            producers[i].start();
        }
        
        for(int i = 0; i < NC ; i++){
            consumers[i] = new Consumer(data,queueMonitor,this);
            consumers[i].start();
        }

        javax.swing.Timer timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateData();
            }
        });
        timer.start();
    }
    
    public void reset(){
        Consumer.reset();
        Producer.reset();
        textDataHistory.setText("");
        maxQ = 0;
        queueMonitor = new Monitor(16);
        data.clear();
        for(Thread c: consumers){
            c.stop(); // not very elegant brute force
        }
    }
    
    public void checkData(){
        int number = data.size();
        int total = 0;
        for(Integer i: data) total += i;
        this.textDataHistory.append("\n" 
                + "Producers say. Number of data items sent: " + Producer.getCount() 
                + " Sum of data items: " + Producer.getTotal());
        this.textDataHistory.append("\n" 
                + "Arrived in data. Number of data items: " + number 
                + " Sum of data items: " + total);
        this.textDataHistory.append("\n" 
                + "Consumers say. Number of data items: " + Consumer.getCount() 
                + " Sum of data items: " + Consumer.getTotal());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textDataReceived = new javax.swing.JTextField();
        textDataTotal = new javax.swing.JTextField();
        textDataAverage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textDataHistory = new javax.swing.JTextArea();
        textQueueSummary = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textDataExpected = new javax.swing.JTextField();
        spinnerNumProd = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        spinnerNumberCons = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        buttonStart = new javax.swing.JButton();
        spinnerNumItems = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        buttonCheckData = new javax.swing.JButton();
        buttonResetData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textDataHistory.setColumns(20);
        textDataHistory.setRows(5);
        jScrollPane1.setViewportView(textDataHistory);

        jLabel1.setText("Received");

        jLabel2.setText("Total");

        jLabel3.setText("Average");

        jLabel4.setText("Expecting");

        spinnerNumProd.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        jLabel5.setText("Number of Producers");

        spinnerNumberCons.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        jLabel6.setText("Number of Consumers");

        buttonStart.setText("Start");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        spinnerNumItems.setModel(new javax.swing.SpinnerNumberModel(10, 10, 10000, 10));

        jLabel7.setText("Data items per Producer");

        jLabel8.setText("Data History");

        jLabel9.setText("Summary");

        buttonCheckData.setText("Check Data");
        buttonCheckData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckDataActionPerformed(evt);
            }
        });

        buttonResetData.setText("Reset");
        buttonResetData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel1)
                                                    .addComponent(jLabel4))
                                                .addGap(22, 22, 22))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(44, 44, 44)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textDataTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textDataReceived, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textDataExpected, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textDataAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(spinnerNumItems, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinnerNumberCons)
                                            .addComponent(spinnerNumProd))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)))
                                    .addComponent(buttonResetData))
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonCheckData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(24, 24, 24)
                                .addComponent(textQueueSummary)))
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(textDataExpected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerNumProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(textDataReceived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerNumberCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textDataTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerNumItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(textDataAverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonResetData))
                    .addComponent(buttonCheckData, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textQueueSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        startProdCons();
    }//GEN-LAST:event_buttonStartActionPerformed

    private void buttonCheckDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckDataActionPerformed
        checkData();
    }//GEN-LAST:event_buttonCheckDataActionPerformed

    private void buttonResetDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetDataActionPerformed
        reset();
    }//GEN-LAST:event_buttonResetDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCheckData;
    private javax.swing.JButton buttonResetData;
    private javax.swing.JButton buttonStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinnerNumItems;
    private javax.swing.JSpinner spinnerNumProd;
    private javax.swing.JSpinner spinnerNumberCons;
    private javax.swing.JTextField textDataAverage;
    private javax.swing.JTextField textDataExpected;
    private javax.swing.JTextArea textDataHistory;
    private javax.swing.JTextField textDataReceived;
    private javax.swing.JTextField textDataTotal;
    private javax.swing.JTextField textQueueSummary;
    // End of variables declaration//GEN-END:variables
}
