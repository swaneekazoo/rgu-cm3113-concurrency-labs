package cm3113.lab08;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JLabel;
import javax.swing.border.LineBorder;

/**
 *
 * @author dpl0795
 */
public class App extends javax.swing.JFrame {
    
    public enum SolutionType {
       NONE, SEMV1, SEMV2, SEMV3, SEMV4, MONV1, MONV2, MONV3, MONV4
    };
    
    SolutionType solution = SolutionType.SEMV1;

    String s = "";
    long readerTimeRead = 10, writerTimeProduce = 10, updateTime = 1;
    long readerTimeConsume = 10, writerTimeWrite = 10;
    long numberWrites = 0, numberReads = 0;
    RWmonitor monitor;
    int SIZE = 50, NW = 1, NR = 2;
    JLabel[] b = new JLabel[50];
    Data[] data = new Data[50];
    
    Writer<Data>[] writers;
    Reader<Data>[] readers;
    
    ExecutorService executor;
    javax.swing.Timer swingtimer;
    
    

    /**
     * Creates new form OutPutFrame
     */
    public App() {
        initComponents();

        jPanel1.setLayout(new GridLayout(10, 5));
        for (int i = 0; i < 50; i++) {
            b[i] = new JLabel(".");
            data[i] = new Data(".");
            b[i].setOpaque(true);
            b[i].setBackground(Color.gray);
            b[i].setBorder(new LineBorder(Color.BLACK));
            jPanel1.add(b[i]);
        }
        monitor = new RWmonitorV1();
        executor = Executors.newFixedThreadPool(8);

        startAllRW();
    /* Control the updates to the GUI with a swing timer */    
        swingtimer = new javax.swing.Timer(100,
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateDataOnGUI();
            }
        });
        swingtimer.start();        
    }
    
    public void updateDataOnGUI(){
        for (int i = 0; i < 50; i++) { 
            b[i].setText(data[i].value);
            b[i].setBackground(data[i].color);
            textArea.setText("Number of Writes completed = " + Data.numberWrites 
                    + "\nNumber of Reads completed = " + Data.numberReads
                    + "\n" + Reader.getData() + "\n" + Writer.getData());
        }
    }
    
    private void stopAllRW(){
        for (int i = 0; i < NW; i++) {
            writers[i].cease();
            while(writers[i].isAlive());
        }
        for (int i = 0; i < NR; i++) {
            readers[i].cease();
            while(readers[i].isAlive());
        }
        System.out.println("closed");
        //executor.shutdown();
        
    }
    
    private void startAllRW(){
        writers = new Writer[NW];
        readers = new Reader[NR];
        System.out.println("NW=" + NW + " NR=" +NR);
        //executor = Executors.newFixedThreadPool(8);
        for (int i = 0; i < NW; i++) {
            writers[i] = new Writer(writerTimeProduce,writerTimeWrite, monitor, data, i + "");
            writers[i].setDaemon(true);
            executor.submit(writers[i]);
            System.out.println("W" + i + " started");
        }
        for (int i = 0; i < NR; i++) {
            readers[i] = new Reader(readerTimeRead, readerTimeConsume, monitor, data, this, i + "");
            readers[i].setDaemon(true);
            executor.submit(readers[i]);
            System.out.println("R" + i + " started");
        }
    }

    private void reset() {
        stopAllRW();
        swingtimer.stop();
        System.out.println("A");
        Writer.reset();
        Reader.reset();
        textArea.setText("");
        Data.resetCounts();
        writerTimeProduce = (int)spinnerWriterMakeData.getValue();
        writerTimeWrite = (int)spinnerTimeReaderRead.getValue();
        readerTimeRead = (int)spinnerTimeWriterWrite.getValue();
        readerTimeConsume = (int)spinnerTimeReaderUsing.getValue();
        NW = (int)spinnerNW.getValue();
        NR = (int)spinnerNR.getValue();
        System.out.println("B");
        startAllRW();
        System.out.println("C");
        swingtimer.restart();       
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spinnerNW = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        spinnerNR = new javax.swing.JSpinner();
        spinnerWriterMakeData = new javax.swing.JSpinner();
        spinnerTimeReaderRead = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        spinnerTimeWriterWrite = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        spinnerTimeReaderUsing = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        chooseSemaphorwRW1 = new javax.swing.JMenu();
        chooseSemaphoreRW1 = new javax.swing.JRadioButtonMenuItem();
        chooseSemaphoreRW2 = new javax.swing.JRadioButtonMenuItem();
        chooseSemaphoreRW3 = new javax.swing.JRadioButtonMenuItem();
        chooseSemaphoreRW4 = new javax.swing.JRadioButtonMenuItem();
        chooseMonitorRW1 = new javax.swing.JRadioButtonMenuItem();
        chooseMonitorRW2 = new javax.swing.JRadioButtonMenuItem();
        chooseMonitorRW3 = new javax.swing.JRadioButtonMenuItem();
        chooseMonitorRW4 = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setText("Writer Time to Produce (ms)");

        jLabel3.setText("Reader Time to Read (ms)");

        spinnerNW.setModel(new javax.swing.SpinnerNumberModel(1, 1, 16, 1));
        spinnerNW.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNWStateChanged(evt);
            }
        });

        jLabel4.setText("Number of Writers");

        jLabel6.setText("Number of Readers");

        spinnerNR.setModel(new javax.swing.SpinnerNumberModel(2, 1, 16, 1));
        spinnerNR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNRStateChanged(evt);
            }
        });

        spinnerWriterMakeData.setModel(new javax.swing.SpinnerNumberModel(10, 0, 1000, 10));

        spinnerTimeReaderRead.setModel(new javax.swing.SpinnerNumberModel(10, 0, 1000, 10));

        jLabel7.setText("Writer Time to Wrte (ms)");

        spinnerTimeWriterWrite.setModel(new javax.swing.SpinnerNumberModel(10, 0, 1000, 10));

        jLabel8.setText("Reader Time to Consume (ms)");

        spinnerTimeReaderUsing.setModel(new javax.swing.SpinnerNumberModel(10, 0, 1000, 10));

        jButton1.setText("Restart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        chooseSemaphorwRW1.setText("ChooseSolution");
        buttonGroup1.add(chooseSemaphorwRW1);

        chooseSemaphoreRW1.setSelected(true);
        chooseSemaphoreRW1.setText("SemaphoreRW1");
        chooseSemaphoreRW1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSemaphoreRW1ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseSemaphoreRW1);

        buttonGroup1.add(chooseSemaphoreRW2);
        chooseSemaphoreRW2.setSelected(true);
        chooseSemaphoreRW2.setText("SemaphoreRW2");
        chooseSemaphoreRW2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSemaphoreRW2ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseSemaphoreRW2);

        buttonGroup1.add(chooseSemaphoreRW3);
        chooseSemaphoreRW3.setText("SemaphoreRW3");
        chooseSemaphoreRW3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSemaphoreRW3ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseSemaphoreRW3);

        buttonGroup1.add(chooseSemaphoreRW4);
        chooseSemaphoreRW4.setText("SemaphoreRW4");
        chooseSemaphoreRW4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSemaphoreRW4ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseSemaphoreRW4);

        buttonGroup1.add(chooseMonitorRW1);
        chooseMonitorRW1.setText("MonitorRW1");
        chooseMonitorRW1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMonitorRW1ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseMonitorRW1);

        buttonGroup1.add(chooseMonitorRW2);
        chooseMonitorRW2.setText("MonitorRW2");
        chooseMonitorRW2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMonitorRW2ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseMonitorRW2);

        buttonGroup1.add(chooseMonitorRW3);
        chooseMonitorRW3.setText("MonitorRW3");
        chooseMonitorRW3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMonitorRW3ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseMonitorRW3);

        buttonGroup1.add(chooseMonitorRW4);
        chooseMonitorRW4.setText("MonitorRW4");
        chooseMonitorRW4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMonitorRW4ActionPerformed(evt);
            }
        });
        chooseSemaphorwRW1.add(chooseMonitorRW4);

        jMenuBar1.add(chooseSemaphorwRW1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(37, 37, 37)
                                .addComponent(spinnerNW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinnerNR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(spinnerTimeWriterWrite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerWriterMakeData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerTimeReaderRead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinnerTimeReaderUsing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(spinnerNW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(spinnerWriterMakeData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(spinnerTimeWriterWrite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(spinnerNR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(spinnerTimeReaderRead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(spinnerTimeReaderUsing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseSemaphoreRW1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSemaphoreRW1ActionPerformed
        //monitor = new RWSemaphoreV1();
        //jTextField1.setText("Semaphore Version 1: unecessary exclusion between readers");
        jTextField1.setText("You'll need to implement a monitor using a Semaphore Solution 1");
        reset();
    }//GEN-LAST:event_chooseSemaphoreRW1ActionPerformed

    private void chooseSemaphoreRW2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSemaphoreRW2ActionPerformed
        //monitor = new RWSemaphoreV2();
        //jTextField1.setText("Semaphore Version 2: priority for readers");
        jTextField1.setText("You'll need to implement a monitor using a Semaphore Solution 2");
        reset();
    }//GEN-LAST:event_chooseSemaphoreRW2ActionPerformed

    private void chooseSemaphoreRW3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSemaphoreRW3ActionPerformed
        //monitor = new RWSemaphoreV3();
        //jTextField1.setText("Semaphore Version 3: equal priority for readers and writers");
        jTextField1.setText("You'll need to implement a monitor using a Semaphore Solution 3");
        reset();
    }//GEN-LAST:event_chooseSemaphoreRW3ActionPerformed

    private void chooseSemaphoreRW4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSemaphoreRW4ActionPerformed
        //monitor = new RWSemaphoreV4();
        //jTextField1.setText("Semaphore Version 4: priority for writers");
        jTextField1.setText("You'll need to implement a monitor using a Semaphore Solution 4");
        reset();
    }//GEN-LAST:event_chooseSemaphoreRW4ActionPerformed

    private void spinnerNWStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerNWStateChanged
        reset();
    }//GEN-LAST:event_spinnerNWStateChanged

    private void spinnerNRStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerNRStateChanged
        reset();
    }//GEN-LAST:event_spinnerNRStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        reset();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void chooseMonitorRW1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMonitorRW1ActionPerformed
        //monitor = new RWmonitorV1();
        //jTextField1.setText("Monitor version 1: priority for readers");
        jTextField1.setText("You'll need to implement a priority for readers monitor");
        reset();
    }//GEN-LAST:event_chooseMonitorRW1ActionPerformed

    private void chooseMonitorRW2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMonitorRW2ActionPerformed
        //monitor = new RWmonitorV2();
        //jTextField1.setText("Monitor version 2: priority for writers");
        jTextField1.setText("You'll need to implement a priority for writers monitor");
        reset();
    }//GEN-LAST:event_chooseMonitorRW2ActionPerformed

    private void chooseMonitorRW3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMonitorRW3ActionPerformed
        //monitor = new RWmonitorV3();
        //jTextField1.setText("Monitor version 3: equal priority for readers and writers");
        jTextField1.setText("You'll need to implement an equal priority monitor");
        reset();
    }//GEN-LAST:event_chooseMonitorRW3ActionPerformed

    private void chooseMonitorRW4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMonitorRW4ActionPerformed
        //monitor = new RWmonitorV4();
        //jTextField1.setText("Monitor version 4: uses ReentrantReadWriteLock");
        jTextField1.setText("You'll need to implement monitor using a ReentrantReadWriteLock");
        reset();
    }//GEN-LAST:event_chooseMonitorRW4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }
    private int count;

    public synchronized void addText(String str) {
        if (++count % 20 == 0) {
            str += "\n"; // line break every 20 changes
        }
        textArea.append(str);
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButtonMenuItem chooseMonitorRW1;
    private javax.swing.JRadioButtonMenuItem chooseMonitorRW2;
    private javax.swing.JRadioButtonMenuItem chooseMonitorRW3;
    private javax.swing.JRadioButtonMenuItem chooseMonitorRW4;
    private javax.swing.JRadioButtonMenuItem chooseSemaphoreRW1;
    private javax.swing.JRadioButtonMenuItem chooseSemaphoreRW2;
    private javax.swing.JRadioButtonMenuItem chooseSemaphoreRW3;
    private javax.swing.JRadioButtonMenuItem chooseSemaphoreRW4;
    private javax.swing.JMenu chooseSemaphorwRW1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JSpinner spinnerNR;
    private javax.swing.JSpinner spinnerNW;
    private javax.swing.JSpinner spinnerTimeReaderRead;
    private javax.swing.JSpinner spinnerTimeReaderUsing;
    private javax.swing.JSpinner spinnerTimeWriterWrite;
    private javax.swing.JSpinner spinnerWriterMakeData;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
